# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:52:20+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import conint, constr

from models import (
    AcceptAttachmentResponse,
    AccessDeniedException,
    Alias,
    AssociateConnectPeerResponse,
    AssociateCustomerGatewayResponse,
    AssociateLinkResponse,
    AssociateTransitGatewayConnectPeerResponse,
    AttachmentType,
    ConflictException,
    ConnectAttachmentsPostRequest,
    ConnectionIds,
    ConnectPeerIds,
    ConnectPeersPostRequest,
    CoreNetworkPolicyException,
    CoreNetworksCoreNetworkIdCoreNetworkPolicyPostRequest,
    CoreNetworksCoreNetworkIdPatchRequest,
    CoreNetworksPostRequest,
    CreateConnectAttachmentResponse,
    CreateConnectionResponse,
    CreateConnectPeerResponse,
    CreateCoreNetworkResponse,
    CreateDeviceResponse,
    CreateGlobalNetworkResponse,
    CreateLinkResponse,
    CreateSiteResponse,
    CreateSiteToSiteVpnAttachmentResponse,
    CreateTransitGatewayPeeringResponse,
    CreateTransitGatewayRouteTableAttachmentResponse,
    CreateVpcAttachmentResponse,
    CustomerGatewayArns,
    DeleteAttachmentResponse,
    DeleteConnectionResponse,
    DeleteConnectPeerResponse,
    DeleteCoreNetworkPolicyVersionResponse,
    DeleteCoreNetworkResponse,
    DeleteDeviceResponse,
    DeleteGlobalNetworkResponse,
    DeleteLinkResponse,
    DeletePeeringResponse,
    DeleteResourcePolicyResponse,
    DeleteSiteResponse,
    DeregisterTransitGatewayResponse,
    DescribeGlobalNetworksResponse,
    DeviceIds,
    DisassociateConnectPeerResponse,
    DisassociateCustomerGatewayResponse,
    DisassociateLinkResponse,
    DisassociateTransitGatewayConnectPeerResponse,
    ExecuteCoreNetworkChangeSetResponse,
    GetConnectAttachmentResponse,
    GetConnectionsResponse,
    GetConnectPeerAssociationsResponse,
    GetConnectPeerResponse,
    GetCoreNetworkChangeEventsResponse,
    GetCoreNetworkChangeSetResponse,
    GetCoreNetworkPolicyResponse,
    GetCoreNetworkResponse,
    GetCustomerGatewayAssociationsResponse,
    GetDevicesResponse,
    GetLinkAssociationsResponse,
    GetLinksResponse,
    GetNetworkResourceCountsResponse,
    GetNetworkResourceRelationshipsResponse,
    GetNetworkResourcesResponse,
    GetNetworkRoutesResponse,
    GetNetworkTelemetryResponse,
    GetResourcePolicyResponse,
    GetRouteAnalysisResponse,
    GetSitesResponse,
    GetSiteToSiteVpnAttachmentResponse,
    GetTransitGatewayConnectPeerAssociationsResponse,
    GetTransitGatewayPeeringResponse,
    GetTransitGatewayRegistrationsResponse,
    GetTransitGatewayRouteTableAttachmentResponse,
    GetVpcAttachmentResponse,
    GlobalNetworkIds,
    GlobalNetworksGlobalNetworkIdConnectionsConnectionIdPatchRequest,
    GlobalNetworksGlobalNetworkIdConnectionsPostRequest,
    GlobalNetworksGlobalNetworkIdConnectPeerAssociationsPostRequest,
    GlobalNetworksGlobalNetworkIdCustomerGatewayAssociationsPostRequest,
    GlobalNetworksGlobalNetworkIdDevicesDeviceIdPatchRequest,
    GlobalNetworksGlobalNetworkIdDevicesPostRequest,
    GlobalNetworksGlobalNetworkIdLinkAssociationsPostRequest,
    GlobalNetworksGlobalNetworkIdLinksLinkIdPatchRequest,
    GlobalNetworksGlobalNetworkIdLinksPostRequest,
    GlobalNetworksGlobalNetworkIdNetworkResourcesResourceArnMetadataPatchRequest,
    GlobalNetworksGlobalNetworkIdNetworkRoutesPostRequest,
    GlobalNetworksGlobalNetworkIdPatchRequest,
    GlobalNetworksGlobalNetworkIdRouteAnalysesPostRequest,
    GlobalNetworksGlobalNetworkIdSitesPostRequest,
    GlobalNetworksGlobalNetworkIdSitesSiteIdPatchRequest,
    GlobalNetworksGlobalNetworkIdTransitGatewayConnectPeerAssociationsPostRequest,
    GlobalNetworksGlobalNetworkIdTransitGatewayRegistrationsPostRequest,
    GlobalNetworksPostRequest,
    InternalServerException,
    LinkIds,
    ListAttachmentsResponse,
    ListConnectPeersResponse,
    ListCoreNetworkPolicyVersionsResponse,
    ListCoreNetworksResponse,
    ListOrganizationServiceAccessStatusResponse,
    ListPeeringsResponse,
    ListTagsForResourceResponse,
    OrganizationsServiceAccessPostRequest,
    PeeringType,
    PutCoreNetworkPolicyResponse,
    PutResourcePolicyResponse,
    RegisterTransitGatewayResponse,
    RejectAttachmentResponse,
    ResourceNotFoundException,
    ResourcePolicyResourceArnPostRequest,
    RestoreCoreNetworkPolicyVersionResponse,
    ServiceQuotaExceededException,
    SiteIds,
    SiteToSiteVpnAttachmentsPostRequest,
    StartOrganizationServiceAccessUpdateResponse,
    StartRouteAnalysisResponse,
    State,
    State2,
    TagKeys,
    TagResourceResponse,
    TagsResourceArnPostRequest,
    ThrottlingException,
    TransitGatewayArns,
    TransitGatewayConnectPeerArns,
    TransitGatewayPeeringsPostRequest,
    TransitGatewayRouteTableAttachmentsPostRequest,
    UntagResourceResponse,
    UpdateConnectionResponse,
    UpdateCoreNetworkResponse,
    UpdateDeviceResponse,
    UpdateGlobalNetworkResponse,
    UpdateLinkResponse,
    UpdateNetworkResourceMetadataResponse,
    UpdateSiteResponse,
    UpdateVpcAttachmentResponse,
    ValidationException,
    VpcAttachmentsAttachmentIdPatchRequest,
    VpcAttachmentsPostRequest,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='Amazon Web Services enables you to centrally manage your Amazon Web Services Cloud WAN core network and your Transit Gateway network across Amazon Web Services accounts, Regions, and on-premises locations.',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AWS Network Manager',
    version='2019-07-05',
    servers=[
        {
            'description': 'The NetworkManager multi-region endpoint',
            'url': 'http://networkmanager.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The NetworkManager multi-region endpoint',
            'url': 'https://networkmanager.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The NetworkManager endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://networkmanager.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The NetworkManager endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://networkmanager.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/attachments',
    description=""" Returns a list of core network attachments. """,
    tags=[
        'core_network_management',
        'global_network_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_attachments(
    core_network_id: Optional[
        constr(pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ] = Query(None, alias='coreNetworkId'),
    attachment_type: Optional[AttachmentType] = Query(None, alias='attachmentType'),
    edge_location: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=63)
    ] = Query(None, alias='edgeLocation'),
    state: Optional[State] = None,
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/attachments/{attachmentId}',
    description=""" Deletes an attachment. Supports all attachment types. """,
    tags=[
        'attachment_management',
        'vpn_attachment_management',
        'vpc_attachment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attachments/{attachmentId}/accept',
    description=""" <p>Accepts a core network attachment request. </p> <p>Once the attachment request is accepted by a core network owner, the attachment is created and connected to a core network.</p> """,
    tags=['attachment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def accept_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attachments/{attachmentId}/reject',
    description=""" Rejects a core network attachment request. """,
    tags=[
        'attachment_management',
        'vpn_attachment_management',
        'vpc_attachment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def reject_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/connect-attachments',
    description=""" <p>Creates a core network Connect attachment from a specified core network attachment. </p> <p>A core network Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a core network and an appliance. A core network Connect attachment uses an existing VPC attachment as the underlying transport mechanism.</p> """,
    tags=['attachment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_connect_attachment(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ConnectAttachmentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connect-attachments/{attachmentId}',
    description=""" Returns information about a core network Connect attachment. """,
    tags=[
        'attachment_management',
        'vpn_attachment_management',
        'vpc_attachment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_connect_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connect-peers',
    description=""" Returns a list of core network Connect peers. """,
    tags=[
        'attachment_management',
        'connect_peer_management',
        'core_network_management',
        'global_network_management',
        'connection_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_connect_peers(
    core_network_id: Optional[
        constr(pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ] = Query(None, alias='coreNetworkId'),
    connect_attachment_id: Optional[
        constr(pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ] = Query(None, alias='connectAttachmentId'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/connect-peers',
    description=""" Creates a core network Connect peer for a specified core network connect attachment between a core network and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6). """,
    tags=['connect_peer_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_connect_peer(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ConnectPeersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/connect-peers/{connectPeerId}',
    description=""" Deletes a Connect peer. """,
    tags=['connect_peer_management', 'connection_management', 'peerings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_connect_peer(
    connect_peer_id: constr(
        pattern=r'^connect-peer-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='connectPeerId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connect-peers/{connectPeerId}',
    description=""" Returns information about a core network Connect peer. """,
    tags=['connect_peer_management', 'peerings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_connect_peer(
    connect_peer_id: constr(
        pattern=r'^connect-peer-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='connectPeerId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/core-networks',
    description=""" Returns a list of owned and shared core networks. """,
    tags=['organization_service_access'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_core_networks(
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/core-networks',
    description=""" Creates a core network as part of your global network, and optionally, with a core network policy. """,
    tags=['core_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_core_network(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CoreNetworksPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/core-networks/{coreNetworkId}',
    description=""" Deletes a core network along with all core network policies. This can only be done if there are no attachments on a core network. """,
    tags=[
        'core_network_management',
        'global_network_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_core_network(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/core-networks/{coreNetworkId}',
    description=""" Returns information about the LIVE policy for a core network. """,
    tags=['core_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_core_network(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/core-networks/{coreNetworkId}',
    description=""" Updates the description of a core network. """,
    tags=['core_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_core_network(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CoreNetworksCoreNetworkIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/core-networks/{coreNetworkId}/core-network-change-events/{policyVersionId}',
    description=""" Returns information about a core network change event. """,
    tags=['core_network_management', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_core_network_change_events(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    policy_version_id: int = Path(..., alias='policyVersionId'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/core-networks/{coreNetworkId}/core-network-change-sets/{policyVersionId}',
    description=""" Returns a change set between the LIVE core network policy and a submitted policy. """,
    tags=[
        'core_network_management',
        'global_network_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_core_network_change_set(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    policy_version_id: int = Path(..., alias='policyVersionId'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/core-networks/{coreNetworkId}/core-network-change-sets/{policyVersionId}/execute',
    description=""" Executes a change set on your core network. Deploys changes globally based on the policy submitted.. """,
    tags=['core_network_management', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def execute_core_network_change_set(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    policy_version_id: int = Path(..., alias='policyVersionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/core-networks/{coreNetworkId}/core-network-policy',
    description=""" Returns details about a core network policy. You can get details about your current live policy or any previous policy version. """,
    tags=['core_network_management', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_core_network_policy(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    policy_version_id: Optional[int] = Query(None, alias='policyVersionId'),
    alias: Optional[Alias] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/core-networks/{coreNetworkId}/core-network-policy',
    description=""" Creates a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and the submitted policy. """,
    tags=['core_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_core_network_policy(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CoreNetworksCoreNetworkIdCoreNetworkPolicyPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/core-networks/{coreNetworkId}/core-network-policy-versions',
    description=""" Returns a list of core network policy versions. """,
    tags=['core_network_management', 'global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_core_network_policy_versions(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/core-networks/{coreNetworkId}/core-network-policy-versions/{policyVersionId}',
    description=""" Deletes a policy version from a core network. You can't delete the current LIVE policy. """,
    tags=['core_network_management', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_core_network_policy_version(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    policy_version_id: int = Path(..., alias='policyVersionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/core-networks/{coreNetworkId}/core-network-policy-versions/{policyVersionId}/restore',
    description=""" Restores a previous policy version as a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and restored policy. """,
    tags=['core_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def restore_core_network_policy_version(
    core_network_id: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='coreNetworkId'),
    policy_version_id: int = Path(..., alias='policyVersionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks',
    description=""" Describes one or more global networks. By default, all global networks are described. To describe the objects in your global network, you must use the appropriate <code>Get*</code> action. For example, to list the transit gateways in your global network, use <a>GetTransitGatewayRegistrations</a>. """,
    tags=[
        'global_network_management',
        'core_network_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_global_networks(
    global_network_ids: Optional[GlobalNetworkIds] = Query(
        None, alias='globalNetworkIds'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks',
    description=""" Creates a new, empty global network. """,
    tags=['global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_global_network(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}',
    description=""" Deletes an existing global network. You must first delete all global network objects (devices, links, and sites), deregister all transit gateways, and delete any core networks. """,
    tags=['global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_global_network(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/global-networks/{globalNetworkId}',
    description=""" Updates an existing global network. To remove information for any of the parameters, specify an empty string. """,
    tags=['global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_global_network(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/connect-peer-associations',
    description=""" Returns information about a core network Connect peer associations. """,
    tags=['global_network_management', 'connect_peer_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_connect_peer_associations(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    connect_peer_ids: Optional[ConnectPeerIds] = Query(None, alias='connectPeerIds'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/connect-peer-associations',
    description=""" <p>Associates a core network Connect peer with a device and optionally, with a link. </p> <p>If you specify a link, it must be associated with the specified device. You can only associate core network Connect peers that have been created on a core network Connect attachment on a core network. </p> """,
    tags=['global_network_management', 'connect_peer_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_connect_peer(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdConnectPeerAssociationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/connect-peer-associations/{connectPeerId}',
    description=""" Disassociates a core network Connect peer from a device and a link.  """,
    tags=['connect_peer_management', 'global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_connect_peer(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    connect_peer_id: constr(
        pattern=r'^connect-peer-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='connectPeerId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/connections',
    description=""" Gets information about one or more of your connections in a global network. """,
    tags=['global_network_management', 'connection_management', 'device_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_connections(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    connection_ids: Optional[ConnectionIds] = Query(None, alias='connectionIds'),
    device_id: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=50)
    ] = Query(None, alias='deviceId'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/connections',
    description=""" Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network. """,
    tags=['global_network_management', 'connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_connection(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdConnectionsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/connections/{connectionId}',
    description=""" Deletes the specified connection in your global network. """,
    tags=['global_network_management', 'connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_connection(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    connection_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='connectionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/global-networks/{globalNetworkId}/connections/{connectionId}',
    description=""" Updates the information for an existing connection. To remove information for any of the parameters, specify an empty string. """,
    tags=['global_network_management', 'connection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_connection(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    connection_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='connectionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdConnectionsConnectionIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/customer-gateway-associations',
    description=""" Gets the association information for customer gateways that are associated with devices and links in your global network. """,
    tags=[
        'global_network_management',
        'customer_gateway_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_customer_gateway_associations(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    customer_gateway_arns: Optional[CustomerGatewayArns] = Query(
        None, alias='customerGatewayArns'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/customer-gateway-associations',
    description=""" <p>Associates a customer gateway with a device and optionally, with a link. If you specify a link, it must be associated with the specified device. </p> <p>You can only associate customer gateways that are connected to a VPN attachment on a transit gateway or core network registered in your global network. When you register a transit gateway or core network, customer gateways that are connected to the transit gateway are automatically included in the global network. To list customer gateways that are connected to a transit gateway, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html">DescribeVpnConnections</a> EC2 API and filter by <code>transit-gateway-id</code>.</p> <p>You cannot associate a customer gateway with more than one device and link. </p> """,
    tags=['global_network_management', 'customer_gateway_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_customer_gateway(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdCustomerGatewayAssociationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/customer-gateway-associations/{customerGatewayArn}',
    description=""" Disassociates a customer gateway from a device and a link. """,
    tags=['customer_gateway_management', 'global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_customer_gateway(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    customer_gateway_arn: constr(
        pattern=r'[\s\S]*', min_length=0, max_length=500
    ) = Path(..., alias='customerGatewayArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/devices',
    description=""" Gets information about one or more of your devices in a global network. """,
    tags=[
        'global_network_management',
        'device_management',
        'site_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_devices(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    device_ids: Optional[DeviceIds] = Query(None, alias='deviceIds'),
    site_id: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Query(
        None, alias='siteId'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/devices',
    description=""" Creates a new device in a global network. If you specify both a site ID and a location, the location of the site is used for visualization in the Network Manager console. """,
    tags=['global_network_management', 'device_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_device(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdDevicesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/devices/{deviceId}',
    description=""" Deletes an existing device. You must first disassociate the device from any links and customer gateways. """,
    tags=['global_network_management', 'device_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_device(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    device_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='deviceId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/global-networks/{globalNetworkId}/devices/{deviceId}',
    description=""" Updates the details for an existing device. To remove information for any of the parameters, specify an empty string. """,
    tags=['global_network_management', 'device_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_device(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    device_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='deviceId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdDevicesDeviceIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/link-associations',
    description=""" Gets the link associations for a device or a link. Either the device ID or the link ID must be specified. """,
    tags=['global_network_management', 'device_management', 'link_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_link_associations(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    device_id: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=50)
    ] = Query(None, alias='deviceId'),
    link_id: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Query(
        None, alias='linkId'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/link-associations',
    description=""" Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site. """,
    tags=['global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_link(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdLinkAssociationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/link-associations#deviceId&linkId',
    description=""" Disassociates an existing device from a link. You must first disassociate any customer gateways that are associated with the link. """,
    tags=['global_network_management', 'device_management', 'link_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_link(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    device_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Query(
        ..., alias='deviceId'
    ),
    link_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Query(
        ..., alias='linkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/links',
    description=""" <p>Gets information about one or more links in a specified global network.</p> <p>If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.</p> """,
    tags=['global_network_management', 'link_management', 'site_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_links(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    link_ids: Optional[LinkIds] = Query(None, alias='linkIds'),
    site_id: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Query(
        None, alias='siteId'
    ),
    type: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = None,
    provider: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = None,
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/links',
    description=""" Creates a new link for a specified site. """,
    tags=['global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_link(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdLinksPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/links/{linkId}',
    description=""" Deletes an existing link. You must first disassociate the link from any devices and customer gateways. """,
    tags=['global_network_management', 'link_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_link(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    link_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='linkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/global-networks/{globalNetworkId}/links/{linkId}',
    description=""" Updates the details for an existing link. To remove information for any of the parameters, specify an empty string. """,
    tags=['global_network_management', 'link_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_link(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    link_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='linkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdLinksLinkIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/network-resource-count',
    description=""" Gets the count of network resources, by resource type, for the specified global network. """,
    tags=['global_network_management', 'network_resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_network_resource_counts(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    resource_type: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=256)
    ] = Query(None, alias='resourceType'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/network-resource-relationships',
    description=""" Gets the network resource relationships for the specified global network. """,
    tags=[
        'global_network_management',
        'core_network_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_network_resource_relationships(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    core_network_id: Optional[
        constr(pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ] = Query(None, alias='coreNetworkId'),
    registered_gateway_arn: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)
    ] = Query(None, alias='registeredGatewayArn'),
    aws_region: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=63)
    ] = Query(None, alias='awsRegion'),
    account_id: Optional[
        constr(pattern=r'[\s\S]*', min_length=12, max_length=12)
    ] = Query(None, alias='accountId'),
    resource_type: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=256)
    ] = Query(None, alias='resourceType'),
    resource_arn: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)
    ] = Query(None, alias='resourceArn'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/network-resources',
    description=""" <p>Describes the network resources for the specified global network.</p> <p>The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.</p> """,
    tags=[
        'global_network_management',
        'core_network_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_network_resources(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    core_network_id: Optional[
        constr(pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ] = Query(None, alias='coreNetworkId'),
    registered_gateway_arn: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)
    ] = Query(None, alias='registeredGatewayArn'),
    aws_region: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=63)
    ] = Query(None, alias='awsRegion'),
    account_id: Optional[
        constr(pattern=r'[\s\S]*', min_length=12, max_length=12)
    ] = Query(None, alias='accountId'),
    resource_type: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=256)
    ] = Query(None, alias='resourceType'),
    resource_arn: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)
    ] = Query(None, alias='resourceArn'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/global-networks/{globalNetworkId}/network-resources/{resourceArn}/metadata',
    description=""" Updates the resource metadata for the specified global network. """,
    tags=['global_network_management', 'network_resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_network_resource_metadata(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    resource_arn: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdNetworkResourcesResourceArnMetadataPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/network-routes',
    description=""" Gets the network routes of the specified global network. """,
    tags=['global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_network_routes(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdNetworkRoutesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/network-telemetry',
    description=""" Gets the network telemetry of the specified global network. """,
    tags=[
        'global_network_management',
        'core_network_management',
        'network_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_network_telemetry(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    core_network_id: Optional[
        constr(pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ] = Query(None, alias='coreNetworkId'),
    registered_gateway_arn: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)
    ] = Query(None, alias='registeredGatewayArn'),
    aws_region: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=63)
    ] = Query(None, alias='awsRegion'),
    account_id: Optional[
        constr(pattern=r'[\s\S]*', min_length=12, max_length=12)
    ] = Query(None, alias='accountId'),
    resource_type: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=256)
    ] = Query(None, alias='resourceType'),
    resource_arn: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)
    ] = Query(None, alias='resourceArn'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/route-analyses',
    description=""" Starts analyzing the routing path between the specified source and destination. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/route-analyzer.html">Route Analyzer</a>. """,
    tags=['global_network_management', 'route_analysis_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_route_analysis(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdRouteAnalysesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/route-analyses/{routeAnalysisId}',
    description=""" Gets information about the specified route analysis. """,
    tags=['route_analysis_management', 'global_network_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_route_analysis(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    route_analysis_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=256) = Path(
        ..., alias='routeAnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/sites',
    description=""" Gets information about one or more of your sites in a global network. """,
    tags=[
        'global_network_management',
        'network_resource_management',
        'site_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_sites(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    site_ids: Optional[SiteIds] = Query(None, alias='siteIds'),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/sites',
    description=""" Creates a new site in a global network. """,
    tags=['global_network_management', 'site_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_site(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdSitesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/sites/{siteId}',
    description=""" Deletes an existing site. The site cannot be associated with any device or link. """,
    tags=['global_network_management', 'site_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_site(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    site_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='siteId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/global-networks/{globalNetworkId}/sites/{siteId}',
    description=""" Updates the information for an existing site. To remove information for any of the parameters, specify an empty string. """,
    tags=['global_network_management', 'site_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_site(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    site_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='siteId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdSitesSiteIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations',
    description=""" Gets information about one or more of your transit gateway Connect peer associations in a global network. """,
    tags=[
        'transit_gateway_operations',
        'global_network_management',
        'core_network_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transit_gateway_connect_peer_associations(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    transit_gateway_connect_peer_arns: Optional[TransitGatewayConnectPeerArns] = Query(
        None, alias='transitGatewayConnectPeerArns'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations',
    description=""" <p>Associates a transit gateway Connect peer with a device, and optionally, with a link. If you specify a link, it must be associated with the specified device. </p> <p>You can only associate transit gateway Connect peers that have been created on a transit gateway that's registered in your global network.</p> <p>You cannot associate a transit gateway Connect peer with more than one device and link. </p> """,
    tags=[
        'connect_peer_management',
        'global_network_management',
        'transit_gateway_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def associate_transit_gateway_connect_peer(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdTransitGatewayConnectPeerAssociationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations/{transitGatewayConnectPeerArn}',
    description=""" Disassociates a transit gateway Connect peer from a device and link. """,
    tags=[
        'connect_peer_management',
        'transit_gateway_operations',
        'global_network_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disassociate_transit_gateway_connect_peer(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    transit_gateway_connect_peer_arn: constr(
        pattern=r'[\s\S]*', min_length=0, max_length=500
    ) = Path(..., alias='transitGatewayConnectPeerArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/global-networks/{globalNetworkId}/transit-gateway-registrations',
    description=""" Gets information about the transit gateway registrations in a specified global network. """,
    tags=['global_network_management', 'transit_gateway_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transit_gateway_registrations(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    transit_gateway_arns: Optional[TransitGatewayArns] = Query(
        None, alias='transitGatewayArns'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/global-networks/{globalNetworkId}/transit-gateway-registrations',
    description=""" Registers a transit gateway in your global network. Not all Regions support transit gateways for global networks. For a list of the supported Regions, see <a href="https://docs.aws.amazon.com/network-manager/latest/tgwnm/what-are-global-networks.html#nm-available-regions">Region Availability</a> in the <i>Amazon Web Services Transit Gateways for Global Networks User Guide</i>. The transit gateway can be in any of the supported Amazon Web Services Regions, but it must be owned by the same Amazon Web Services account that owns the global network. You cannot register a transit gateway in more than one global network. """,
    tags=['global_network_management', 'transit_gateway_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def register_transit_gateway(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: GlobalNetworksGlobalNetworkIdTransitGatewayRegistrationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/global-networks/{globalNetworkId}/transit-gateway-registrations/{transitGatewayArn}',
    description=""" Deregisters a transit gateway from your global network. This action does not delete your transit gateway, or modify any of its attachments. This action removes any customer gateway associations. """,
    tags=['global_network_management', 'transit_gateway_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def deregister_transit_gateway(
    global_network_id: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Path(
        ..., alias='globalNetworkId'
    ),
    transit_gateway_arn: constr(
        pattern=r'[\s\S]*', min_length=0, max_length=500
    ) = Path(..., alias='transitGatewayArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/service-access',
    description=""" Gets the status of the Service Linked Role (SLR) deployment for the accounts in a given Amazon Web Services Organization. """,
    tags=['organization_service_access'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_organization_service_access_status(
    max_results: Optional[conint(ge=1, le=500)] = Query(None, alias='maxResults'),
    next_token: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/service-access',
    description=""" Enables the Network Manager service for an Amazon Web Services Organization. This can only be called by a management account within the organization.  """,
    tags=['organization_service_access'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_organization_service_access_update(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: OrganizationsServiceAccessPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/peerings',
    description=""" Lists the peerings for a core network. """,
    tags=['connect_peer_management', 'peerings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_peerings(
    core_network_id: Optional[
        constr(pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ] = Query(None, alias='coreNetworkId'),
    peering_type: Optional[PeeringType] = Query(None, alias='peeringType'),
    edge_location: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=63)
    ] = Query(None, alias='edgeLocation'),
    state: Optional[State2] = None,
    max_results: Union[
        Optional[conint(ge=1, le=500)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    next_token: Union[
        Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/peerings/{peeringId}',
    description=""" Deletes an existing peering connection. """,
    tags=['connect_peer_management', 'peerings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_peering(
    peering_id: constr(
        pattern=r'^peering-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='peeringId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/resource-policy/{resourceArn}',
    description=""" Deletes a resource policy for the specified resource. This revokes the access of the principals specified in the resource policy. """,
    tags=['resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_resource_policy(
    resource_arn: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/resource-policy/{resourceArn}',
    description=""" Returns information about a resource policy. """,
    tags=['organization_service_access', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_resource_policy(
    resource_arn: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/resource-policy/{resourceArn}',
    description=""" Creates or updates a resource policy. """,
    tags=['resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_resource_policy(
    resource_arn: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ResourcePolicyResourceArnPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/site-to-site-vpn-attachments',
    description=""" Creates an Amazon Web Services site-to-site VPN attachment on an edge location of a core network. """,
    tags=['vpn_attachment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_site_to_site_vpn_attachment(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: SiteToSiteVpnAttachmentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/site-to-site-vpn-attachments/{attachmentId}',
    description=""" Returns information about a site-to-site VPN attachment. """,
    tags=[
        'attachment_management',
        'vpn_attachment_management',
        'vpc_attachment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_site_to_site_vpn_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{resourceArn}',
    description=""" Lists the tags for a specified resource. """,
    tags=['resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    resource_arn: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tags/{resourceArn}',
    description=""" Tags a specified resource. """,
    tags=['tags_management', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    resource_arn: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TagsResourceArnPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/tags/{resourceArn}#tagKeys',
    description=""" Removes tags from a specified resource. """,
    tags=['tags_management', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    resource_arn: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500) = Path(
        ..., alias='resourceArn'
    ),
    tag_keys: TagKeys = Query(..., alias='tagKeys'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transit-gateway-peerings',
    description=""" Creates a transit gateway peering connection. """,
    tags=['transit_gateway_operations', 'peerings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_transit_gateway_peering(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TransitGatewayPeeringsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transit-gateway-peerings/{peeringId}',
    description=""" Returns information about a transit gateway peer. """,
    tags=['connect_peer_management', 'peerings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transit_gateway_peering(
    peering_id: constr(
        pattern=r'^peering-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='peeringId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transit-gateway-route-table-attachments',
    description=""" Creates a transit gateway route table attachment. """,
    tags=['transit_gateway_route_table_management', 'attachment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_transit_gateway_route_table_attachment(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TransitGatewayRouteTableAttachmentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transit-gateway-route-table-attachments/{attachmentId}',
    description=""" Returns information about a transit gateway route table attachment. """,
    tags=[
        'attachment_management',
        'vpn_attachment_management',
        'vpc_attachment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transit_gateway_route_table_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vpc-attachments',
    description=""" Creates a VPC attachment on an edge location of a core network. """,
    tags=['vpc_attachment_management', 'attachment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_vpc_attachment(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VpcAttachmentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vpc-attachments/{attachmentId}',
    description=""" Returns information about a VPC attachment. """,
    tags=['attachment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_vpc_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/vpc-attachments/{attachmentId}',
    description=""" Updates a VPC attachment. """,
    tags=['attachment_management', 'vpc_attachment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_vpc_attachment(
    attachment_id: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Path(..., alias='attachmentId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: VpcAttachmentsAttachmentIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
