# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:52:20+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AWSAccountId(RootModel[constr(pattern=r'[\s\S]*', min_length=12, max_length=12)]):
    root: constr(pattern=r'[\s\S]*', min_length=12, max_length=12)


class AcceptAttachmentRequest(BaseModel):
    pass


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class Action(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class AttachmentId(
    RootModel[
        constr(pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ]
):
    root: constr(pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50)


class AttachmentState(Enum):
    REJECTED = 'REJECTED'
    PENDING_ATTACHMENT_ACCEPTANCE = 'PENDING_ATTACHMENT_ACCEPTANCE'
    CREATING = 'CREATING'
    FAILED = 'FAILED'
    AVAILABLE = 'AVAILABLE'
    UPDATING = 'UPDATING'
    PENDING_NETWORK_UPDATE = 'PENDING_NETWORK_UPDATE'
    PENDING_TAG_ACCEPTANCE = 'PENDING_TAG_ACCEPTANCE'
    DELETING = 'DELETING'


class AttachmentType(Enum):
    CONNECT = 'CONNECT'
    SITE_TO_SITE_VPN = 'SITE_TO_SITE_VPN'
    VPC = 'VPC'
    TRANSIT_GATEWAY_ROUTE_TABLE = 'TRANSIT_GATEWAY_ROUTE_TABLE'


class Boolean(RootModel[bool]):
    root: bool


class ChangeAction(Enum):
    ADD = 'ADD'
    MODIFY = 'MODIFY'
    REMOVE = 'REMOVE'


class ChangeSetState(Enum):
    PENDING_GENERATION = 'PENDING_GENERATION'
    FAILED_GENERATION = 'FAILED_GENERATION'
    READY_TO_EXECUTE = 'READY_TO_EXECUTE'
    EXECUTING = 'EXECUTING'
    EXECUTION_SUCCEEDED = 'EXECUTION_SUCCEEDED'
    OUT_OF_DATE = 'OUT_OF_DATE'


class ChangeStatus(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'


class ChangeType(Enum):
    CORE_NETWORK_SEGMENT = 'CORE_NETWORK_SEGMENT'
    CORE_NETWORK_EDGE = 'CORE_NETWORK_EDGE'
    ATTACHMENT_MAPPING = 'ATTACHMENT_MAPPING'
    ATTACHMENT_ROUTE_PROPAGATION = 'ATTACHMENT_ROUTE_PROPAGATION'
    ATTACHMENT_ROUTE_STATIC = 'ATTACHMENT_ROUTE_STATIC'
    CORE_NETWORK_CONFIGURATION = 'CORE_NETWORK_CONFIGURATION'
    SEGMENTS_CONFIGURATION = 'SEGMENTS_CONFIGURATION'
    SEGMENT_ACTIONS_CONFIGURATION = 'SEGMENT_ACTIONS_CONFIGURATION'
    ATTACHMENT_POLICIES_CONFIGURATION = 'ATTACHMENT_POLICIES_CONFIGURATION'


class ClientToken(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=256)


class ConflictException(RootModel[Any]):
    root: Any


class ConnectPeerAssociationState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class ConnectPeerId(
    RootModel[
        constr(pattern=r'^connect-peer-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ]
):
    root: constr(
        pattern=r'^connect-peer-([0-9a-f]{8,17})$', min_length=0, max_length=50
    )


class ConnectPeerIdList(RootModel[List[ConnectPeerId]]):
    root: List[ConnectPeerId]


class ConnectPeerState(Enum):
    CREATING = 'CREATING'
    FAILED = 'FAILED'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'


class ConnectionArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class ConnectionId(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=50)


class ConnectionIdList(RootModel[List[ConnectionId]]):
    root: List[ConnectionId]


class ConnectionState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class ConnectionStatus(Enum):
    UP = 'UP'
    DOWN = 'DOWN'


class ConnectionType(Enum):
    BGP = 'BGP'
    IPSEC = 'IPSEC'


class ConstrainedString(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=256)


class ConstrainedStringList(RootModel[List[ConstrainedString]]):
    root: List[ConstrainedString]


class CoreNetworkArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class CoreNetworkId(
    RootModel[
        constr(pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ]
):
    root: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    )


class CoreNetworkPolicyAlias(Enum):
    LIVE = 'LIVE'
    LATEST = 'LATEST'


class CoreNetworkPolicyDocument(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)


class CoreNetworkPolicyException(RootModel[Any]):
    root: Any


class CoreNetworkState(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'


class CustomerGatewayArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class CustomerGatewayArnList(RootModel[List[CustomerGatewayArn]]):
    root: List[CustomerGatewayArn]


class CustomerGatewayAssociationState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class DateTime(RootModel[datetime]):
    root: datetime


class DeleteAttachmentRequest(BaseModel):
    pass


class DeleteConnectPeerRequest(BaseModel):
    pass


class DeleteConnectionRequest(BaseModel):
    pass


class DeleteCoreNetworkPolicyVersionRequest(BaseModel):
    pass


class DeleteCoreNetworkRequest(BaseModel):
    pass


class DeleteDeviceRequest(BaseModel):
    pass


class DeleteGlobalNetworkRequest(BaseModel):
    pass


class DeleteLinkRequest(BaseModel):
    pass


class DeletePeeringRequest(BaseModel):
    pass


class DeleteResourcePolicyRequest(BaseModel):
    pass


class DeleteResourcePolicyResponse(BaseModel):
    pass


class DeleteSiteRequest(BaseModel):
    pass


class DeregisterTransitGatewayRequest(BaseModel):
    pass


class DescribeGlobalNetworksRequest(BaseModel):
    pass


class DeviceArn(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class DeviceId(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=50)


class DeviceIdList(RootModel[List[DeviceId]]):
    root: List[DeviceId]


class DeviceState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class DisassociateConnectPeerRequest(BaseModel):
    pass


class DisassociateCustomerGatewayRequest(BaseModel):
    pass


class DisassociateLinkRequest(BaseModel):
    pass


class DisassociateTransitGatewayConnectPeerRequest(BaseModel):
    pass


class ExecuteCoreNetworkChangeSetRequest(BaseModel):
    pass


class ExecuteCoreNetworkChangeSetResponse(BaseModel):
    pass


class ExternalRegionCode(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=63)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=63)


class ExternalRegionCodeList(RootModel[List[ExternalRegionCode]]):
    root: List[ExternalRegionCode]


class FilterName(RootModel[constr(pattern=r'^[0-9a-zA-Z\.-]*$', max_length=128)]):
    root: constr(pattern=r'^[0-9a-zA-Z\.-]*$', max_length=128)


class FilterValue(
    RootModel[constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?-]*$', max_length=255)]
):
    root: constr(pattern=r'^[0-9a-zA-Z\*\.\\/\?-]*$', max_length=255)


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue]


class GetConnectAttachmentRequest(BaseModel):
    pass


class GetConnectPeerAssociationsRequest(BaseModel):
    pass


class GetConnectPeerRequest(BaseModel):
    pass


class GetConnectionsRequest(BaseModel):
    pass


class GetCoreNetworkChangeEventsRequest(BaseModel):
    pass


class GetCoreNetworkChangeSetRequest(BaseModel):
    pass


class GetCoreNetworkPolicyRequest(BaseModel):
    pass


class GetCoreNetworkRequest(BaseModel):
    pass


class GetCustomerGatewayAssociationsRequest(BaseModel):
    pass


class GetDevicesRequest(BaseModel):
    pass


class GetLinkAssociationsRequest(BaseModel):
    pass


class GetLinksRequest(BaseModel):
    pass


class GetNetworkResourceCountsRequest(BaseModel):
    pass


class GetNetworkResourceRelationshipsRequest(BaseModel):
    pass


class GetNetworkResourcesRequest(BaseModel):
    pass


class GetNetworkTelemetryRequest(BaseModel):
    pass


class GetResourcePolicyRequest(BaseModel):
    pass


class GetRouteAnalysisRequest(BaseModel):
    pass


class GetSiteToSiteVpnAttachmentRequest(BaseModel):
    pass


class GetSitesRequest(BaseModel):
    pass


class GetTransitGatewayConnectPeerAssociationsRequest(BaseModel):
    pass


class GetTransitGatewayPeeringRequest(BaseModel):
    pass


class GetTransitGatewayRegistrationsRequest(BaseModel):
    pass


class GetTransitGatewayRouteTableAttachmentRequest(BaseModel):
    pass


class GetVpcAttachmentRequest(BaseModel):
    pass


class GlobalNetworkArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class GlobalNetworkId(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=50)


class GlobalNetworkIdList(RootModel[List[GlobalNetworkId]]):
    root: List[GlobalNetworkId]


class GlobalNetworkState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class IPAddress(RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=50)]):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=50)


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class LinkArn(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class LinkAssociationState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class LinkId(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=50)


class LinkIdList(RootModel[List[LinkId]]):
    root: List[LinkId]


class LinkState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class ListAttachmentsRequest(BaseModel):
    pass


class ListConnectPeersRequest(BaseModel):
    pass


class ListCoreNetworkPolicyVersionsRequest(BaseModel):
    pass


class ListCoreNetworksRequest(BaseModel):
    pass


class ListOrganizationServiceAccessStatusRequest(BaseModel):
    pass


class ListPeeringsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class Location(BaseModel):
    Address: Optional[ConstrainedString] = None
    Latitude: Optional[ConstrainedString] = None
    Longitude: Optional[ConstrainedString] = None


class Long(RootModel[int]):
    root: int


class MaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class NetworkResourceCount(BaseModel):
    Count: Optional[Integer] = None
    ResourceType: Optional[ConstrainedString] = None


class NetworkResourceCountList(RootModel[List[NetworkResourceCount]]):
    root: List[NetworkResourceCount]


class NetworkResourceMetadataMap(RootModel[Optional[Dict[str, ConstrainedString]]]):
    root: Optional[Dict[str, ConstrainedString]] = None


class NextToken(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)


class OrganizationAwsServiceAccessStatus(
    RootModel[constr(min_length=0, max_length=50)]
):
    root: constr(min_length=0, max_length=50)


class OrganizationId(
    RootModel[constr(pattern=r'^o-([0-9a-f]{8,17})$', min_length=0, max_length=50)]
):
    root: constr(pattern=r'^o-([0-9a-f]{8,17})$', min_length=0, max_length=50)


class PeeringId(
    RootModel[
        constr(pattern=r'^peering-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ]
):
    root: constr(pattern=r'^peering-([0-9a-f]{8,17})$', min_length=0, max_length=50)


class PeeringState(Enum):
    CREATING = 'CREATING'
    FAILED = 'FAILED'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'


class PeeringType(Enum):
    TRANSIT_GATEWAY = 'TRANSIT_GATEWAY'


class PutCoreNetworkPolicyRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Description: Optional[ConstrainedString] = None
    LatestVersionId: Optional[Integer] = None
    PolicyDocument: CoreNetworkPolicyDocument


class PutResourcePolicyResponse(BaseModel):
    pass


class ReasonContextKey(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)


class ReasonContextValue(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)


class RejectAttachmentRequest(BaseModel):
    pass


class Relationship(BaseModel):
    From: Optional[ConstrainedString] = None
    To: Optional[ConstrainedString] = None


class RelationshipList(RootModel[List[Relationship]]):
    root: List[Relationship]


class ResourceArn(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=1500)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourcePolicyDocument(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)


class RestoreCoreNetworkPolicyVersionRequest(BaseModel):
    pass


class RouteAnalysisCompletionReasonCode(Enum):
    TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND = 'TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND'
    TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY = (
        'TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY'
    )
    CYCLIC_PATH_DETECTED = 'CYCLIC_PATH_DETECTED'
    TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND = (
        'TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND'
    )
    ROUTE_NOT_FOUND = 'ROUTE_NOT_FOUND'
    BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND = 'BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND'
    INACTIVE_ROUTE_FOR_DESTINATION_FOUND = 'INACTIVE_ROUTE_FOR_DESTINATION_FOUND'
    TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH = (
        'TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH'
    )
    MAX_HOPS_EXCEEDED = 'MAX_HOPS_EXCEEDED'
    POSSIBLE_MIDDLEBOX = 'POSSIBLE_MIDDLEBOX'
    NO_DESTINATION_ARN_PROVIDED = 'NO_DESTINATION_ARN_PROVIDED'


class RouteAnalysisCompletionResultCode(Enum):
    CONNECTED = 'CONNECTED'
    NOT_CONNECTED = 'NOT_CONNECTED'


class RouteAnalysisStatus(Enum):
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class RouteState(Enum):
    ACTIVE = 'ACTIVE'
    BLACKHOLE = 'BLACKHOLE'


class RouteStateList(RootModel[List[RouteState]]):
    root: List[RouteState]


class RouteTableType(Enum):
    TRANSIT_GATEWAY_ROUTE_TABLE = 'TRANSIT_GATEWAY_ROUTE_TABLE'
    CORE_NETWORK_SEGMENT = 'CORE_NETWORK_SEGMENT'


class RouteType(Enum):
    PROPAGATED = 'PROPAGATED'
    STATIC = 'STATIC'


class RouteTypeList(RootModel[List[RouteType]]):
    root: List[RouteType]


class SLRDeploymentStatus(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class ServerSideString(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SiteArn(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class SiteId(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=50)


class SiteIdList(RootModel[List[SiteId]]):
    root: List[SiteId]


class SiteState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


class StartOrganizationServiceAccessUpdateRequest(BaseModel):
    Action_1: Action = Field(..., alias='Action')


class SubnetArn(
    RootModel[
        constr(
            pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:subnet\/subnet-[0-9a-f]{8,17}$|^$',
            min_length=0,
            max_length=500,
        )
    ]
):
    root: constr(
        pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:subnet\/subnet-[0-9a-f]{8,17}$|^$',
        min_length=0,
        max_length=500,
    )


class SubnetArnList(RootModel[List[SubnetArn]]):
    root: List[SubnetArn]


class TagKey(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)


class ThrottlingException(RootModel[Any]):
    root: Any


class TransitGatewayArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class TransitGatewayArnList(RootModel[List[TransitGatewayArn]]):
    root: List[TransitGatewayArn]


class TransitGatewayAttachmentArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class TransitGatewayAttachmentId(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=50)


class TransitGatewayConnectPeerArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class TransitGatewayConnectPeerArnList(RootModel[List[TransitGatewayConnectPeerArn]]):
    root: List[TransitGatewayConnectPeerArn]


class TransitGatewayConnectPeerAssociationState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class TransitGatewayPeeringAttachmentId(
    RootModel[
        constr(pattern=r'^tgw-attach-([0-9a-f]{8,17})$', min_length=0, max_length=50)
    ]
):
    root: constr(pattern=r'^tgw-attach-([0-9a-f]{8,17})$', min_length=0, max_length=50)


class TransitGatewayRegistrationState(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    FAILED = 'FAILED'


class TransitGatewayRegistrationStateReason(BaseModel):
    Code: Optional[TransitGatewayRegistrationState] = None
    Message: Optional[ConstrainedString] = None


class TransitGatewayRouteTableArn(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=500)


class TunnelProtocol(Enum):
    GRE = 'GRE'


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateConnectionRequest(BaseModel):
    ConnectedLinkId: Optional[LinkId] = None
    Description: Optional[ConstrainedString] = None
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')


class UpdateCoreNetworkRequest(BaseModel):
    Description: Optional[ConstrainedString] = None


class UpdateGlobalNetworkRequest(BaseModel):
    Description: Optional[ConstrainedString] = None


class UpdateNetworkResourceMetadataRequest(BaseModel):
    Metadata: NetworkResourceMetadataMap


class UpdateNetworkResourceMetadataResponse(BaseModel):
    Metadata: Optional[NetworkResourceMetadataMap] = None
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')


class UpdateSiteRequest(BaseModel):
    Description: Optional[ConstrainedString] = None
    Location_1: Optional[Location] = Field(None, alias='Location')


class ValidationException(RootModel[Any]):
    root: Any


class VpcArn(
    RootModel[
        constr(
            pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpc\/vpc-[0-9a-f]{8,17}$',
            min_length=0,
            max_length=500,
        )
    ]
):
    root: constr(
        pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpc\/vpc-[0-9a-f]{8,17}$',
        min_length=0,
        max_length=500,
    )


class VpcOptions(BaseModel):
    ApplianceModeSupport: Optional[Boolean] = None
    Ipv6Support: Optional[Boolean] = None


class VpnConnectionArn(
    RootModel[
        constr(
            pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpn-connection\/vpn-[0-9a-f]{8,17}$',
            min_length=0,
            max_length=500,
        )
    ]
):
    root: constr(
        pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpn-connection\/vpn-[0-9a-f]{8,17}$',
        min_length=0,
        max_length=500,
    )


class State(Enum):
    REJECTED = 'REJECTED'
    PENDING_ATTACHMENT_ACCEPTANCE = 'PENDING_ATTACHMENT_ACCEPTANCE'
    CREATING = 'CREATING'
    FAILED = 'FAILED'
    AVAILABLE = 'AVAILABLE'
    UPDATING = 'UPDATING'
    PENDING_NETWORK_UPDATE = 'PENDING_NETWORK_UPDATE'
    PENDING_TAG_ACCEPTANCE = 'PENDING_TAG_ACCEPTANCE'
    DELETING = 'DELETING'


class Options(BaseModel):
    Protocol: Optional[TunnelProtocol] = None


class BgpOptions(BaseModel):
    PeerAsn: Optional[Long] = None


class CoreNetworksCoreNetworkIdPatchRequest(BaseModel):
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The description of the update.')
    )


class Alias(Enum):
    LIVE = 'LIVE'
    LATEST = 'LATEST'


class CoreNetworksCoreNetworkIdCoreNetworkPolicyPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The client token associated with the request.')
    )
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='a core network policy description.')
    )
    LatestVersionId: Optional[int] = Field(
        None, description='The ID of a core network policy. '
    )
    PolicyDocument: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000) = (
        Field(..., description='The policy document.')
    )


class GlobalNetworkIds(RootModel[List[GlobalNetworkId]]):
    root: List[GlobalNetworkId]


class GlobalNetworksGlobalNetworkIdPatchRequest(BaseModel):
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the global network.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )


class ConnectPeerIds(RootModel[List[ConnectPeerId]]):
    root: List[ConnectPeerId]


class GlobalNetworksGlobalNetworkIdConnectPeerAssociationsPostRequest(BaseModel):
    ConnectPeerId: constr(
        pattern=r'^connect-peer-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(..., description='The ID of the Connect peer.')
    DeviceId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the device.'
    )
    LinkId: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Field(
        None, description='The ID of the link.'
    )


class ConnectionIds(RootModel[List[ConnectionId]]):
    root: List[ConnectionId]


class GlobalNetworksGlobalNetworkIdConnectionsConnectionIdPatchRequest(BaseModel):
    ConnectedLinkId: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=50)
    ] = Field(
        None, description='The ID of the link for the second device in the connection.'
    )
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the connection.</p> <p>Length Constraints: Maximum length of 256 characters.</p>',
        )
    )
    LinkId: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Field(
        None, description='The ID of the link for the first device in the connection.'
    )


class CustomerGatewayArns(RootModel[List[CustomerGatewayArn]]):
    root: List[CustomerGatewayArn]


class GlobalNetworksGlobalNetworkIdCustomerGatewayAssociationsPostRequest(BaseModel):
    CustomerGatewayArn: constr(pattern=r'[\s\S]*', min_length=0, max_length=500) = (
        Field(
            ..., description='The Amazon Resource Name (ARN) of the customer gateway.'
        )
    )
    DeviceId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the device.'
    )
    LinkId: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Field(
        None, description='The ID of the link.'
    )


class DeviceIds(RootModel[List[DeviceId]]):
    root: List[DeviceId]


class AWSLocation(BaseModel):
    SubnetArn_1: Optional[SubnetArn] = Field(None, alias='SubnetArn')
    Zone: Optional[ConstrainedString] = None


class GlobalNetworksGlobalNetworkIdDevicesDeviceIdPatchRequest(BaseModel):
    AWSLocation_1: Optional[AWSLocation] = Field(
        None,
        alias='AWSLocation',
        description='Specifies a location in Amazon Web Services.',
    )
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the device.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )
    Location_1: Optional[Location] = Field(
        None, alias='Location', description='Describes a location.'
    )
    Model: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None,
        description='<p>The model of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>',
    )
    SerialNumber: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>The serial number of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>',
        )
    )
    SiteId: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Field(
        None, description='The ID of the site.'
    )
    Type: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None, description='The type of the device.'
    )
    Vendor: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None,
        description='<p>The vendor of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>',
    )


class GlobalNetworksGlobalNetworkIdLinkAssociationsPostRequest(BaseModel):
    DeviceId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the device.'
    )
    LinkId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the link.'
    )


class LinkIds(RootModel[List[LinkId]]):
    root: List[LinkId]


class Bandwidth(BaseModel):
    DownloadSpeed: Optional[Integer] = None
    UploadSpeed: Optional[Integer] = None


class GlobalNetworksGlobalNetworkIdLinksLinkIdPatchRequest(BaseModel):
    Bandwidth_1: Optional[Bandwidth] = Field(
        None, alias='Bandwidth', description='Describes bandwidth information.'
    )
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the link.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )
    Provider: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>The provider of the link.</p> <p>Constraints: Maximum length of 128 characters.</p>',
        )
    )
    Type: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None,
        description='<p>The type of the link.</p> <p>Constraints: Maximum length of 128 characters.</p>',
    )


class GlobalNetworksGlobalNetworkIdNetworkResourcesResourceArnMetadataPatchRequest(
    BaseModel
):
    Metadata: Dict[str, ConstrainedString] = Field(
        ..., description='The resource metadata.'
    )


class Destination(BaseModel):
    IpAddress: Optional[IPAddress] = None
    TransitGatewayAttachmentArn_1: Optional[TransitGatewayAttachmentArn] = Field(
        None, alias='TransitGatewayAttachmentArn'
    )


class Source(BaseModel):
    IpAddress: Optional[IPAddress] = None
    TransitGatewayAttachmentArn_1: Optional[TransitGatewayAttachmentArn] = Field(
        None, alias='TransitGatewayAttachmentArn'
    )


class GlobalNetworksGlobalNetworkIdRouteAnalysesPostRequest(BaseModel):
    Destination_1: Destination = Field(
        ..., alias='Destination', description='Describes a source or a destination.'
    )
    IncludeReturnPath: Optional[bool] = Field(
        None,
        description='Indicates whether to analyze the return path. The default is <code>false</code>.',
    )
    Source_1: Source = Field(
        ..., alias='Source', description='Describes a source or a destination.'
    )
    UseMiddleboxes: Optional[bool] = Field(
        None,
        description='Indicates whether to include the location of middlebox appliances in the route analysis. The default is <code>false</code>.',
    )


class SiteIds(RootModel[List[SiteId]]):
    root: List[SiteId]


class GlobalNetworksGlobalNetworkIdSitesSiteIdPatchRequest(BaseModel):
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of your site.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )
    Location_1: Optional[Location] = Field(
        None, alias='Location', description='Describes a location.'
    )


class TransitGatewayConnectPeerArns(RootModel[List[TransitGatewayConnectPeerArn]]):
    root: List[TransitGatewayConnectPeerArn]


class GlobalNetworksGlobalNetworkIdTransitGatewayConnectPeerAssociationsPostRequest(
    BaseModel
):
    DeviceId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the device.'
    )
    LinkId: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Field(
        None, description='The ID of the link.'
    )
    TransitGatewayConnectPeerArn: constr(
        pattern=r'[\s\S]*', min_length=0, max_length=500
    ) = Field(..., description='The Amazon Resource Name (ARN) of the Connect peer.')


class TransitGatewayArns(RootModel[List[TransitGatewayArn]]):
    root: List[TransitGatewayArn]


class GlobalNetworksGlobalNetworkIdTransitGatewayRegistrationsPostRequest(BaseModel):
    TransitGatewayArn: constr(pattern=r'[\s\S]*', min_length=0, max_length=500) = Field(
        ..., description='The Amazon Resource Name (ARN) of the transit gateway.'
    )


class OrganizationsServiceAccessPostRequest(BaseModel):
    Action: constr(min_length=0, max_length=50) = Field(
        ...,
        description='The action to take for the update request. This can be either <code>ENABLE</code> or <code>DISABLE</code>.',
    )


class State2(Enum):
    CREATING = 'CREATING'
    FAILED = 'FAILED'
    AVAILABLE = 'AVAILABLE'
    DELETING = 'DELETING'


class ResourcePolicyResourceArnPostRequest(BaseModel):
    PolicyDocument: constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000) = (
        Field(..., description='The JSON resource policy document.')
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class Options1(BaseModel):
    ApplianceModeSupport: Optional[Boolean] = None
    Ipv6Support: Optional[Boolean] = None


class VpcAttachmentsAttachmentIdPatchRequest(BaseModel):
    AddSubnetArns: Optional[List[SubnetArn]] = Field(
        None, description='Adds a subnet ARN to the VPC attachment.'
    )
    Options: Optional[Options1] = Field(None, description='Describes the VPC options.')
    RemoveSubnetArns: Optional[List[SubnetArn]] = Field(
        None, description='Removes a subnet ARN from the attachment.'
    )


class AccountStatus(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    SLRDeploymentStatus_1: Optional[SLRDeploymentStatus] = Field(
        None, alias='SLRDeploymentStatus'
    )


class AccountStatusList(RootModel[List[AccountStatus]]):
    root: List[AccountStatus]


class AssociateConnectPeerRequest(BaseModel):
    ConnectPeerId_1: ConnectPeerId = Field(..., alias='ConnectPeerId')
    DeviceId_1: DeviceId = Field(..., alias='DeviceId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')


class AssociateCustomerGatewayRequest(BaseModel):
    CustomerGatewayArn_1: CustomerGatewayArn = Field(..., alias='CustomerGatewayArn')
    DeviceId_1: DeviceId = Field(..., alias='DeviceId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')


class AssociateLinkRequest(BaseModel):
    DeviceId_1: DeviceId = Field(..., alias='DeviceId')
    LinkId_1: LinkId = Field(..., alias='LinkId')


class AssociateTransitGatewayConnectPeerRequest(BaseModel):
    DeviceId_1: DeviceId = Field(..., alias='DeviceId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')
    TransitGatewayConnectPeerArn_1: TransitGatewayConnectPeerArn = Field(
        ..., alias='TransitGatewayConnectPeerArn'
    )


class ConnectAttachmentOptions(BaseModel):
    Protocol: Optional[TunnelProtocol] = None


class ConnectPeerAssociation(BaseModel):
    ConnectPeerId_1: Optional[ConnectPeerId] = Field(None, alias='ConnectPeerId')
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')
    State: Optional[ConnectPeerAssociationState] = None


class ConnectPeerAssociationList(RootModel[List[ConnectPeerAssociation]]):
    root: List[ConnectPeerAssociation]


class ConnectPeerBgpConfiguration(BaseModel):
    CoreNetworkAddress: Optional[IPAddress] = None
    CoreNetworkAsn: Optional[Long] = None
    PeerAddress: Optional[IPAddress] = None
    PeerAsn: Optional[Long] = None


class ConnectPeerBgpConfigurationList(RootModel[List[ConnectPeerBgpConfiguration]]):
    root: List[ConnectPeerBgpConfiguration]


class ConnectPeerConfiguration(BaseModel):
    BgpConfigurations: Optional[ConnectPeerBgpConfigurationList] = None
    CoreNetworkAddress: Optional[IPAddress] = None
    InsideCidrBlocks: Optional[ConstrainedStringList] = None
    PeerAddress: Optional[IPAddress] = None
    Protocol: Optional[TunnelProtocol] = None


class ConnectionHealth(BaseModel):
    Status: Optional[ConnectionStatus] = None
    Timestamp: Optional[DateTime] = None
    Type: Optional[ConnectionType] = None


class CoreNetworkChangeEventValues(BaseModel):
    AttachmentId_1: Optional[AttachmentId] = Field(None, alias='AttachmentId')
    Cidr: Optional[ConstrainedString] = None
    EdgeLocation: Optional[ExternalRegionCode] = None
    SegmentName: Optional[ConstrainedString] = None


class CoreNetworkChangeValues(BaseModel):
    Asn: Optional[Long] = None
    Cidr: Optional[ConstrainedString] = None
    DestinationIdentifier: Optional[ConstrainedString] = None
    EdgeLocations: Optional[ExternalRegionCodeList] = None
    InsideCidrBlocks: Optional[ConstrainedStringList] = None
    SegmentName: Optional[ConstrainedString] = None
    SharedSegments: Optional[ConstrainedStringList] = None


class CoreNetworkEdge(BaseModel):
    Asn: Optional[Long] = None
    EdgeLocation: Optional[ExternalRegionCode] = None
    InsideCidrBlocks: Optional[ConstrainedStringList] = None


class CoreNetworkEdgeList(RootModel[List[CoreNetworkEdge]]):
    root: List[CoreNetworkEdge]


class CoreNetworkPolicyError(BaseModel):
    ErrorCode: ServerSideString
    Message: ServerSideString
    Path: Optional[ServerSideString] = None


class CoreNetworkPolicyErrorList(RootModel[List[CoreNetworkPolicyError]]):
    root: List[CoreNetworkPolicyError]


class CoreNetworkPolicyVersion(BaseModel):
    Alias: Optional[CoreNetworkPolicyAlias] = None
    ChangeSetState_1: Optional[ChangeSetState] = Field(None, alias='ChangeSetState')
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    PolicyVersionId: Optional[Integer] = None


class CoreNetworkPolicyVersionList(RootModel[List[CoreNetworkPolicyVersion]]):
    root: List[CoreNetworkPolicyVersion]


class CoreNetworkSegment(BaseModel):
    EdgeLocations: Optional[ExternalRegionCodeList] = None
    Name: Optional[ConstrainedString] = None
    SharedSegments: Optional[ConstrainedStringList] = None


class CoreNetworkSegmentEdgeIdentifier(BaseModel):
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    EdgeLocation: Optional[ExternalRegionCode] = None
    SegmentName: Optional[ConstrainedString] = None


class CoreNetworkSegmentList(RootModel[List[CoreNetworkSegment]]):
    root: List[CoreNetworkSegment]


class CustomerGatewayAssociation(BaseModel):
    CustomerGatewayArn_1: Optional[CustomerGatewayArn] = Field(
        None, alias='CustomerGatewayArn'
    )
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')
    State: Optional[CustomerGatewayAssociationState] = None


class CustomerGatewayAssociationList(RootModel[List[CustomerGatewayAssociation]]):
    root: List[CustomerGatewayAssociation]


class DisassociateConnectPeerResponse(BaseModel):
    ConnectPeerAssociation_1: Optional[ConnectPeerAssociation] = Field(
        None, alias='ConnectPeerAssociation'
    )


class DisassociateCustomerGatewayResponse(BaseModel):
    CustomerGatewayAssociation_1: Optional[CustomerGatewayAssociation] = Field(
        None, alias='CustomerGatewayAssociation'
    )


class FilterMap(RootModel[Optional[Dict[str, FilterValues]]]):
    root: Optional[Dict[str, FilterValues]] = None


class GetConnectPeerAssociationsResponse(BaseModel):
    ConnectPeerAssociations: Optional[ConnectPeerAssociationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetCustomerGatewayAssociationsResponse(BaseModel):
    CustomerGatewayAssociations: Optional[CustomerGatewayAssociationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetNetworkResourceCountsResponse(BaseModel):
    NetworkResourceCounts: Optional[NetworkResourceCountList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetNetworkResourceRelationshipsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Relationships: Optional[RelationshipList] = None


class GetResourcePolicyResponse(BaseModel):
    PolicyDocument: Optional[ResourcePolicyDocument] = None


class LinkAssociation(BaseModel):
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    LinkAssociationState_1: Optional[LinkAssociationState] = Field(
        None, alias='LinkAssociationState'
    )
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')


class LinkAssociationList(RootModel[List[LinkAssociation]]):
    root: List[LinkAssociation]


class ListCoreNetworkPolicyVersionsResponse(BaseModel):
    CoreNetworkPolicyVersions: Optional[CoreNetworkPolicyVersionList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class NetworkResourceSummary(BaseModel):
    Definition: Optional[ConstrainedString] = None
    IsMiddlebox: Optional[Boolean] = None
    NameTag: Optional[ConstrainedString] = None
    RegisteredGatewayArn: Optional[ResourceArn] = None
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    ResourceType: Optional[ConstrainedString] = None


class NetworkRouteDestination(BaseModel):
    CoreNetworkAttachmentId: Optional[AttachmentId] = None
    EdgeLocation: Optional[ExternalRegionCode] = None
    ResourceId: Optional[ConstrainedString] = None
    ResourceType: Optional[ConstrainedString] = None
    SegmentName: Optional[ConstrainedString] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )


class NetworkRouteDestinationList(RootModel[List[NetworkRouteDestination]]):
    root: List[NetworkRouteDestination]


class NetworkTelemetry(BaseModel):
    AccountId: Optional[AWSAccountId] = None
    Address: Optional[ConstrainedString] = None
    AwsRegion: Optional[ExternalRegionCode] = None
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    Health: Optional[ConnectionHealth] = None
    RegisteredGatewayArn: Optional[ResourceArn] = None
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    ResourceId: Optional[ConstrainedString] = None
    ResourceType: Optional[ConstrainedString] = None


class NetworkTelemetryList(RootModel[List[NetworkTelemetry]]):
    root: List[NetworkTelemetry]


class OrganizationStatus(BaseModel):
    AccountStatusList_1: Optional[AccountStatusList] = Field(
        None, alias='AccountStatusList'
    )
    OrganizationAwsServiceAccessStatus_1: Optional[
        OrganizationAwsServiceAccessStatus
    ] = Field(None, alias='OrganizationAwsServiceAccessStatus')
    OrganizationId_1: Optional[OrganizationId] = Field(None, alias='OrganizationId')
    SLRDeploymentStatus_1: Optional[SLRDeploymentStatus] = Field(
        None, alias='SLRDeploymentStatus'
    )


class PathComponent(BaseModel):
    DestinationCidrBlock: Optional[ConstrainedString] = None
    Resource: Optional[NetworkResourceSummary] = None
    Sequence: Optional[Integer] = None


class PathComponentList(RootModel[List[PathComponent]]):
    root: List[PathComponent]


class PutResourcePolicyRequest(BaseModel):
    PolicyDocument: ResourcePolicyDocument


class ReasonContextMap(RootModel[Optional[Dict[str, ReasonContextValue]]]):
    root: Optional[Dict[str, ReasonContextValue]] = None


class RegisterTransitGatewayRequest(BaseModel):
    TransitGatewayArn_1: TransitGatewayArn = Field(..., alias='TransitGatewayArn')


class RouteAnalysisCompletion(BaseModel):
    ReasonCode: Optional[RouteAnalysisCompletionReasonCode] = None
    ReasonContext: Optional[ReasonContextMap] = None
    ResultCode: Optional[RouteAnalysisCompletionResultCode] = None


class RouteAnalysisEndpointOptions(BaseModel):
    IpAddress: Optional[IPAddress] = None
    TransitGatewayArn_1: Optional[TransitGatewayArn] = Field(
        None, alias='TransitGatewayArn'
    )
    TransitGatewayAttachmentArn_1: Optional[TransitGatewayAttachmentArn] = Field(
        None, alias='TransitGatewayAttachmentArn'
    )


class RouteAnalysisEndpointOptionsSpecification(BaseModel):
    IpAddress: Optional[IPAddress] = None
    TransitGatewayAttachmentArn_1: Optional[TransitGatewayAttachmentArn] = Field(
        None, alias='TransitGatewayAttachmentArn'
    )


class RouteAnalysisPath(BaseModel):
    CompletionStatus: Optional[RouteAnalysisCompletion] = None
    Path: Optional[PathComponentList] = None


class RouteTableIdentifier(BaseModel):
    CoreNetworkSegmentEdge: Optional[CoreNetworkSegmentEdgeIdentifier] = None
    TransitGatewayRouteTableArn_1: Optional[TransitGatewayRouteTableArn] = Field(
        None, alias='TransitGatewayRouteTableArn'
    )


class StartOrganizationServiceAccessUpdateResponse(BaseModel):
    OrganizationStatus_1: Optional[OrganizationStatus] = Field(
        None, alias='OrganizationStatus'
    )


class StartRouteAnalysisRequest(BaseModel):
    Destination: RouteAnalysisEndpointOptionsSpecification
    IncludeReturnPath: Optional[Boolean] = None
    Source: RouteAnalysisEndpointOptionsSpecification
    UseMiddleboxes: Optional[Boolean] = None


class Tag(BaseModel):
    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    Tags: TagList


class TransitGatewayConnectPeerAssociation(BaseModel):
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')
    State: Optional[TransitGatewayConnectPeerAssociationState] = None
    TransitGatewayConnectPeerArn_1: Optional[TransitGatewayConnectPeerArn] = Field(
        None, alias='TransitGatewayConnectPeerArn'
    )


class TransitGatewayConnectPeerAssociationList(
    RootModel[List[TransitGatewayConnectPeerAssociation]]
):
    root: List[TransitGatewayConnectPeerAssociation]


class TransitGatewayRegistration(BaseModel):
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    State: Optional[TransitGatewayRegistrationStateReason] = None
    TransitGatewayArn_1: Optional[TransitGatewayArn] = Field(
        None, alias='TransitGatewayArn'
    )


class TransitGatewayRegistrationList(RootModel[List[TransitGatewayRegistration]]):
    root: List[TransitGatewayRegistration]


class UpdateDeviceRequest(BaseModel):
    AWSLocation_1: Optional[AWSLocation] = Field(None, alias='AWSLocation')
    Description: Optional[ConstrainedString] = None
    Location_1: Optional[Location] = Field(None, alias='Location')
    Model: Optional[ConstrainedString] = None
    SerialNumber: Optional[ConstrainedString] = None
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')
    Type: Optional[ConstrainedString] = None
    Vendor: Optional[ConstrainedString] = None


class UpdateLinkRequest(BaseModel):
    Bandwidth_1: Optional[Bandwidth] = Field(None, alias='Bandwidth')
    Description: Optional[ConstrainedString] = None
    Provider: Optional[ConstrainedString] = None
    Type: Optional[ConstrainedString] = None


class UpdateVpcAttachmentRequest(BaseModel):
    AddSubnetArns: Optional[SubnetArnList] = None
    Options: Optional[VpcOptions] = None
    RemoveSubnetArns: Optional[SubnetArnList] = None


class ConnectAttachmentsPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The client token associated with the request.')
    )
    CoreNetworkId: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(
        ...,
        description='The ID of a core network where you want to create the attachment. ',
    )
    EdgeLocation: constr(pattern=r'[\s\S]*', min_length=1, max_length=63) = Field(
        ..., description='The Region where the edge is located.'
    )
    Options_1: Options = Field(
        ...,
        alias='Options',
        description='Describes a core network Connect attachment options.',
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The list of key-value tags associated with the request.'
    )
    TransportAttachmentId: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(..., description='The ID of the attachment between the two connections.')


class ConnectPeersPostRequest(BaseModel):
    BgpOptions_1: Optional[BgpOptions] = Field(
        None, alias='BgpOptions', description='Describes the BGP options.'
    )
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The client token associated with the request.')
    )
    ConnectAttachmentId: constr(
        pattern=r'^attachment-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(..., description='The ID of the connection attachment.')
    CoreNetworkAddress: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=50)
    ] = Field(None, description='A Connect peer core network address.')
    InsideCidrBlocks: List[ConstrainedString] = Field(
        ..., description='The inside IP addresses used for BGP peering.'
    )
    PeerAddress: constr(pattern=r'[\s\S]*', min_length=1, max_length=50) = Field(
        ..., description='The Connect peer address.'
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags associated with the peer request.'
    )


class CoreNetworksPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None, description='The client token associated with a core network request.'
        )
    )
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The description of a core network.')
    )
    GlobalNetworkId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ...,
        description='The ID of the global network that a core network will be a part of. ',
    )
    PolicyDocument: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=10000000)
    ] = Field(None, description='The policy document for creating a core network.')
    Tags: Optional[List[Tag]] = Field(
        None, description='Key-value tags associated with a core network request.'
    )


class GlobalNetworksPostRequest(BaseModel):
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the global network.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags to apply to the resource during creation.'
    )


class GlobalNetworksGlobalNetworkIdConnectionsPostRequest(BaseModel):
    ConnectedDeviceId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the second device in the connection.'
    )
    ConnectedLinkId: Optional[
        constr(pattern=r'[\s\S]*', min_length=0, max_length=50)
    ] = Field(None, description='The ID of the link for the second device.')
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the connection.</p> <p>Length Constraints: Maximum length of 256 characters.</p>',
        )
    )
    DeviceId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the first device in the connection.'
    )
    LinkId: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Field(
        None, description='The ID of the link for the first device.'
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags to apply to the resource during creation.'
    )


class GlobalNetworksGlobalNetworkIdDevicesPostRequest(BaseModel):
    AWSLocation_1: Optional[AWSLocation] = Field(
        None,
        alias='AWSLocation',
        description='Specifies a location in Amazon Web Services.',
    )
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the device.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )
    Location_1: Optional[Location] = Field(
        None, alias='Location', description='Describes a location.'
    )
    Model: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None,
        description='<p>The model of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>',
    )
    SerialNumber: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>The serial number of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>',
        )
    )
    SiteId: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=50)] = Field(
        None, description='The ID of the site.'
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags to apply to the resource during creation.'
    )
    Type: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None, description='The type of the device.'
    )
    Vendor: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None,
        description='<p>The vendor of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>',
    )


class GlobalNetworksGlobalNetworkIdLinksPostRequest(BaseModel):
    Bandwidth_1: Bandwidth = Field(
        ..., alias='Bandwidth', description='Describes bandwidth information.'
    )
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of the link.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )
    Provider: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>The provider of the link.</p> <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \\ ^</p>',
        )
    )
    SiteId: constr(pattern=r'[\s\S]*', min_length=0, max_length=50) = Field(
        ..., description='The ID of the site.'
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags to apply to the resource during creation.'
    )
    Type: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = Field(
        None,
        description='<p>The type of the link.</p> <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \\ ^</p>',
    )


class GlobalNetworksGlobalNetworkIdNetworkRoutesPostRequest(BaseModel):
    DestinationFilters: Optional[Dict[str, FilterValues]] = Field(
        None,
        description='Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.',
    )
    ExactCidrMatches: Optional[List[ConstrainedString]] = Field(
        None, description='An exact CIDR block.'
    )
    LongestPrefixMatches: Optional[List[ConstrainedString]] = Field(
        None,
        description='The most specific route that matches the traffic (longest prefix match).',
    )
    PrefixListIds: Optional[List[ConstrainedString]] = Field(
        None, description='The IDs of the prefix lists.'
    )
    RouteTableIdentifier_1: RouteTableIdentifier = Field(
        ..., alias='RouteTableIdentifier', description='Describes a route table.'
    )
    States: Optional[List[RouteState]] = Field(None, description='The route states.')
    SubnetOfMatches: Optional[List[ConstrainedString]] = Field(
        None,
        description='The routes with a subnet that match the specified CIDR filter.',
    )
    SupernetOfMatches: Optional[List[ConstrainedString]] = Field(
        None,
        description='The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.',
    )
    Types: Optional[List[RouteType]] = Field(None, description='The route types.')


class GlobalNetworksGlobalNetworkIdSitesPostRequest(BaseModel):
    Description: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(
            None,
            description='<p>A description of your site.</p> <p>Constraints: Maximum length of 256 characters.</p>',
        )
    )
    Location_1: Optional[Location] = Field(
        None, alias='Location', description='Describes a location.'
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags to apply to the resource during creation.'
    )


class SiteToSiteVpnAttachmentsPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The client token associated with the request.')
    )
    CoreNetworkId: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(
        ...,
        description="The ID of a core network where you're creating a site-to-site VPN attachment.",
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags associated with the request.'
    )
    VpnConnectionArn: constr(
        pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpn-connection\/vpn-[0-9a-f]{8,17}$',
        min_length=0,
        max_length=500,
    ) = Field(..., description='The ARN identifying the VPN attachment.')


class TagsResourceArnPostRequest(BaseModel):
    Tags: List[Tag] = Field(
        ..., description='The tags to apply to the specified resource.'
    )


class TransitGatewayPeeringsPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The client token associated with the request.')
    )
    CoreNetworkId: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(..., description='The ID of a core network.')
    Tags: Optional[List[Tag]] = Field(
        None, description='The list of key-value tags associated with the request.'
    )
    TransitGatewayArn: constr(pattern=r'[\s\S]*', min_length=0, max_length=500) = Field(
        ..., description='The ARN of the transit gateway for the peering request.'
    )


class TransitGatewayRouteTableAttachmentsPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The client token associated with the request.')
    )
    PeeringId: constr(
        pattern=r'^peering-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(..., description='The ID of the peer for the ')
    Tags: Optional[List[Tag]] = Field(
        None, description='The list of key-value tags associated with the request.'
    )
    TransitGatewayRouteTableArn: constr(
        pattern=r'[\s\S]*', min_length=0, max_length=500
    ) = Field(
        ...,
        description='The ARN of the transit gateway route table for the attachment request. For example, <code>"TransitGatewayRouteTableArn": "arn:aws:ec2:us-west-2:123456789012:transit-gateway-route-table/tgw-rtb-9876543210123456"</code>.',
    )


class VpcAttachmentsPostRequest(BaseModel):
    ClientToken: Optional[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)] = (
        Field(None, description='The client token associated with the request.')
    )
    CoreNetworkId: constr(
        pattern=r'^core-network-([0-9a-f]{8,17})$', min_length=0, max_length=50
    ) = Field(..., description='The ID of a core network for the VPC attachment.')
    Options: Optional[Options1] = Field(None, description='Describes the VPC options.')
    SubnetArns: List[SubnetArn] = Field(
        ..., description='The subnet ARN of the VPC attachment.'
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The key-value tags associated with the request.'
    )
    VpcArn: constr(
        pattern=r'^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpc\/vpc-[0-9a-f]{8,17}$',
        min_length=0,
        max_length=500,
    ) = Field(..., description='The ARN of the VPC.')


class AssociateConnectPeerResponse(BaseModel):
    ConnectPeerAssociation_1: Optional[ConnectPeerAssociation] = Field(
        None, alias='ConnectPeerAssociation'
    )


class AssociateCustomerGatewayResponse(BaseModel):
    CustomerGatewayAssociation_1: Optional[CustomerGatewayAssociation] = Field(
        None, alias='CustomerGatewayAssociation'
    )


class AssociateLinkResponse(BaseModel):
    LinkAssociation_1: Optional[LinkAssociation] = Field(None, alias='LinkAssociation')


class AssociateTransitGatewayConnectPeerResponse(BaseModel):
    TransitGatewayConnectPeerAssociation_1: Optional[
        TransitGatewayConnectPeerAssociation
    ] = Field(None, alias='TransitGatewayConnectPeerAssociation')


class ConnectPeer(BaseModel):
    Configuration: Optional[ConnectPeerConfiguration] = None
    ConnectAttachmentId: Optional[AttachmentId] = None
    ConnectPeerId_1: Optional[ConnectPeerId] = Field(None, alias='ConnectPeerId')
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    CreatedAt: Optional[DateTime] = None
    EdgeLocation: Optional[ExternalRegionCode] = None
    State: Optional[ConnectPeerState] = None
    Tags: Optional[TagList] = None


class ConnectPeerSummary(BaseModel):
    ConnectAttachmentId: Optional[AttachmentId] = None
    ConnectPeerId_1: Optional[ConnectPeerId] = Field(None, alias='ConnectPeerId')
    ConnectPeerState_1: Optional[ConnectPeerState] = Field(
        None, alias='ConnectPeerState'
    )
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    CreatedAt: Optional[DateTime] = None
    EdgeLocation: Optional[ExternalRegionCode] = None
    Tags: Optional[TagList] = None


class ConnectPeerSummaryList(RootModel[List[ConnectPeerSummary]]):
    root: List[ConnectPeerSummary]


class Connection(BaseModel):
    ConnectedDeviceId: Optional[DeviceId] = None
    ConnectedLinkId: Optional[LinkId] = None
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    ConnectionId_1: Optional[ConnectionId] = Field(None, alias='ConnectionId')
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')
    State: Optional[ConnectionState] = None
    Tags: Optional[TagList] = None


class ConnectionList(RootModel[List[Connection]]):
    root: List[Connection]


class CoreNetwork(BaseModel):
    CoreNetworkArn_1: Optional[CoreNetworkArn] = Field(None, alias='CoreNetworkArn')
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    Edges: Optional[CoreNetworkEdgeList] = None
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    Segments: Optional[CoreNetworkSegmentList] = None
    State: Optional[CoreNetworkState] = None
    Tags: Optional[TagList] = None


class CoreNetworkChange(BaseModel):
    Action: Optional[ChangeAction] = None
    Identifier: Optional[ConstrainedString] = None
    IdentifierPath: Optional[ConstrainedString] = None
    NewValues: Optional[CoreNetworkChangeValues] = None
    PreviousValues: Optional[CoreNetworkChangeValues] = None
    Type: Optional[ChangeType] = None


class CoreNetworkChangeEvent(BaseModel):
    Action: Optional[ChangeAction] = None
    EventTime: Optional[DateTime] = None
    IdentifierPath: Optional[ConstrainedString] = None
    Status: Optional[ChangeStatus] = None
    Type: Optional[ChangeType] = None
    Values: Optional[CoreNetworkChangeEventValues] = None


class CoreNetworkChangeEventList(RootModel[List[CoreNetworkChangeEvent]]):
    root: List[CoreNetworkChangeEvent]


class CoreNetworkChangeList(RootModel[List[CoreNetworkChange]]):
    root: List[CoreNetworkChange]


class CoreNetworkPolicy(BaseModel):
    Alias: Optional[CoreNetworkPolicyAlias] = None
    ChangeSetState_1: Optional[ChangeSetState] = Field(None, alias='ChangeSetState')
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    PolicyDocument: Optional[CoreNetworkPolicyDocument] = None
    PolicyErrors: Optional[CoreNetworkPolicyErrorList] = None
    PolicyVersionId: Optional[Integer] = None


class CoreNetworkSummary(BaseModel):
    CoreNetworkArn_1: Optional[CoreNetworkArn] = Field(None, alias='CoreNetworkArn')
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    Description: Optional[ConstrainedString] = None
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    OwnerAccountId: Optional[AWSAccountId] = None
    State: Optional[CoreNetworkState] = None
    Tags: Optional[TagList] = None


class CoreNetworkSummaryList(RootModel[List[CoreNetworkSummary]]):
    root: List[CoreNetworkSummary]


class CreateConnectAttachmentRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    CoreNetworkId_1: CoreNetworkId = Field(..., alias='CoreNetworkId')
    EdgeLocation: ExternalRegionCode
    Options: ConnectAttachmentOptions
    Tags: Optional[TagList] = None
    TransportAttachmentId: AttachmentId


class CreateConnectPeerRequest(BaseModel):
    BgpOptions_1: Optional[BgpOptions] = Field(None, alias='BgpOptions')
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    ConnectAttachmentId: AttachmentId
    CoreNetworkAddress: Optional[IPAddress] = None
    InsideCidrBlocks: ConstrainedStringList
    PeerAddress: IPAddress
    Tags: Optional[TagList] = None


class CreateConnectPeerResponse(BaseModel):
    ConnectPeer_1: Optional[ConnectPeer] = Field(None, alias='ConnectPeer')


class CreateConnectionRequest(BaseModel):
    ConnectedDeviceId: DeviceId
    ConnectedLinkId: Optional[LinkId] = None
    Description: Optional[ConstrainedString] = None
    DeviceId_1: DeviceId = Field(..., alias='DeviceId')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')
    Tags: Optional[TagList] = None


class CreateConnectionResponse(BaseModel):
    Connection_1: Optional[Connection] = Field(None, alias='Connection')


class CreateCoreNetworkRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Description: Optional[ConstrainedString] = None
    GlobalNetworkId_1: GlobalNetworkId = Field(..., alias='GlobalNetworkId')
    PolicyDocument: Optional[CoreNetworkPolicyDocument] = None
    Tags: Optional[TagList] = None


class CreateCoreNetworkResponse(BaseModel):
    CoreNetwork_1: Optional[CoreNetwork] = Field(None, alias='CoreNetwork')


class CreateDeviceRequest(BaseModel):
    AWSLocation_1: Optional[AWSLocation] = Field(None, alias='AWSLocation')
    Description: Optional[ConstrainedString] = None
    Location_1: Optional[Location] = Field(None, alias='Location')
    Model: Optional[ConstrainedString] = None
    SerialNumber: Optional[ConstrainedString] = None
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')
    Tags: Optional[TagList] = None
    Type: Optional[ConstrainedString] = None
    Vendor: Optional[ConstrainedString] = None


class CreateGlobalNetworkRequest(BaseModel):
    Description: Optional[ConstrainedString] = None
    Tags: Optional[TagList] = None


class CreateLinkRequest(BaseModel):
    Bandwidth_1: Bandwidth = Field(..., alias='Bandwidth')
    Description: Optional[ConstrainedString] = None
    Provider: Optional[ConstrainedString] = None
    SiteId_1: SiteId = Field(..., alias='SiteId')
    Tags: Optional[TagList] = None
    Type: Optional[ConstrainedString] = None


class CreateSiteRequest(BaseModel):
    Description: Optional[ConstrainedString] = None
    Location_1: Optional[Location] = Field(None, alias='Location')
    Tags: Optional[TagList] = None


class CreateSiteToSiteVpnAttachmentRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    CoreNetworkId_1: CoreNetworkId = Field(..., alias='CoreNetworkId')
    Tags: Optional[TagList] = None
    VpnConnectionArn_1: VpnConnectionArn = Field(..., alias='VpnConnectionArn')


class CreateTransitGatewayPeeringRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    CoreNetworkId_1: CoreNetworkId = Field(..., alias='CoreNetworkId')
    Tags: Optional[TagList] = None
    TransitGatewayArn_1: TransitGatewayArn = Field(..., alias='TransitGatewayArn')


class CreateTransitGatewayRouteTableAttachmentRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    PeeringId_1: PeeringId = Field(..., alias='PeeringId')
    Tags: Optional[TagList] = None
    TransitGatewayRouteTableArn_1: TransitGatewayRouteTableArn = Field(
        ..., alias='TransitGatewayRouteTableArn'
    )


class CreateVpcAttachmentRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    CoreNetworkId_1: CoreNetworkId = Field(..., alias='CoreNetworkId')
    Options: Optional[VpcOptions] = None
    SubnetArns: SubnetArnList
    Tags: Optional[TagList] = None
    VpcArn_1: VpcArn = Field(..., alias='VpcArn')


class DeleteConnectPeerResponse(BaseModel):
    ConnectPeer_1: Optional[ConnectPeer] = Field(None, alias='ConnectPeer')


class DeleteConnectionResponse(BaseModel):
    Connection_1: Optional[Connection] = Field(None, alias='Connection')


class DeleteCoreNetworkPolicyVersionResponse(BaseModel):
    CoreNetworkPolicy_1: Optional[CoreNetworkPolicy] = Field(
        None, alias='CoreNetworkPolicy'
    )


class DeleteCoreNetworkResponse(BaseModel):
    CoreNetwork_1: Optional[CoreNetwork] = Field(None, alias='CoreNetwork')


class DeregisterTransitGatewayResponse(BaseModel):
    TransitGatewayRegistration_1: Optional[TransitGatewayRegistration] = Field(
        None, alias='TransitGatewayRegistration'
    )


class Device(BaseModel):
    AWSLocation_1: Optional[AWSLocation] = Field(None, alias='AWSLocation')
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    DeviceArn_1: Optional[DeviceArn] = Field(None, alias='DeviceArn')
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    Location_1: Optional[Location] = Field(None, alias='Location')
    Model: Optional[ConstrainedString] = None
    SerialNumber: Optional[ConstrainedString] = None
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')
    State: Optional[DeviceState] = None
    Tags: Optional[TagList] = None
    Type: Optional[ConstrainedString] = None
    Vendor: Optional[ConstrainedString] = None


class DeviceList(RootModel[List[Device]]):
    root: List[Device]


class DisassociateLinkResponse(BaseModel):
    LinkAssociation_1: Optional[LinkAssociation] = Field(None, alias='LinkAssociation')


class DisassociateTransitGatewayConnectPeerResponse(BaseModel):
    TransitGatewayConnectPeerAssociation_1: Optional[
        TransitGatewayConnectPeerAssociation
    ] = Field(None, alias='TransitGatewayConnectPeerAssociation')


class GetConnectPeerResponse(BaseModel):
    ConnectPeer_1: Optional[ConnectPeer] = Field(None, alias='ConnectPeer')


class GetConnectionsResponse(BaseModel):
    Connections: Optional[ConnectionList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetCoreNetworkChangeEventsResponse(BaseModel):
    CoreNetworkChangeEvents: Optional[CoreNetworkChangeEventList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetCoreNetworkChangeSetResponse(BaseModel):
    CoreNetworkChanges: Optional[CoreNetworkChangeList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetCoreNetworkPolicyResponse(BaseModel):
    CoreNetworkPolicy_1: Optional[CoreNetworkPolicy] = Field(
        None, alias='CoreNetworkPolicy'
    )


class GetCoreNetworkResponse(BaseModel):
    CoreNetwork_1: Optional[CoreNetwork] = Field(None, alias='CoreNetwork')


class GetDevicesResponse(BaseModel):
    Devices: Optional[DeviceList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetLinkAssociationsResponse(BaseModel):
    LinkAssociations: Optional[LinkAssociationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetNetworkRoutesRequest(BaseModel):
    DestinationFilters: Optional[FilterMap] = None
    ExactCidrMatches: Optional[ConstrainedStringList] = None
    LongestPrefixMatches: Optional[ConstrainedStringList] = None
    PrefixListIds: Optional[ConstrainedStringList] = None
    RouteTableIdentifier_1: RouteTableIdentifier = Field(
        ..., alias='RouteTableIdentifier'
    )
    States: Optional[RouteStateList] = None
    SubnetOfMatches: Optional[ConstrainedStringList] = None
    SupernetOfMatches: Optional[ConstrainedStringList] = None
    Types: Optional[RouteTypeList] = None


class GetNetworkTelemetryResponse(BaseModel):
    NetworkTelemetry: Optional[NetworkTelemetryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetTransitGatewayConnectPeerAssociationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TransitGatewayConnectPeerAssociations: Optional[
        TransitGatewayConnectPeerAssociationList
    ] = None


class GetTransitGatewayRegistrationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TransitGatewayRegistrations: Optional[TransitGatewayRegistrationList] = None


class GlobalNetwork(BaseModel):
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    GlobalNetworkArn_1: Optional[GlobalNetworkArn] = Field(
        None, alias='GlobalNetworkArn'
    )
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    State: Optional[GlobalNetworkState] = None
    Tags: Optional[TagList] = None


class GlobalNetworkList(RootModel[List[GlobalNetwork]]):
    root: List[GlobalNetwork]


class Link(BaseModel):
    Bandwidth_1: Optional[Bandwidth] = Field(None, alias='Bandwidth')
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    LinkArn_1: Optional[LinkArn] = Field(None, alias='LinkArn')
    LinkId_1: Optional[LinkId] = Field(None, alias='LinkId')
    Provider: Optional[ConstrainedString] = None
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')
    State: Optional[LinkState] = None
    Tags: Optional[TagList] = None
    Type: Optional[ConstrainedString] = None


class LinkList(RootModel[List[Link]]):
    root: List[Link]


class ListConnectPeersResponse(BaseModel):
    ConnectPeers: Optional[ConnectPeerSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCoreNetworksResponse(BaseModel):
    CoreNetworks: Optional[CoreNetworkSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOrganizationServiceAccessStatusResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OrganizationStatus_1: Optional[OrganizationStatus] = Field(
        None, alias='OrganizationStatus'
    )


class ListTagsForResourceResponse(BaseModel):
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class NetworkResource(BaseModel):
    AccountId: Optional[AWSAccountId] = None
    AwsRegion: Optional[ExternalRegionCode] = None
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    Definition: Optional[ConstrainedString] = None
    DefinitionTimestamp: Optional[DateTime] = None
    Metadata: Optional[NetworkResourceMetadataMap] = None
    RegisteredGatewayArn: Optional[ResourceArn] = None
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    ResourceId: Optional[ConstrainedString] = None
    ResourceType: Optional[ConstrainedString] = None
    Tags: Optional[TagList] = None


class NetworkResourceList(RootModel[List[NetworkResource]]):
    root: List[NetworkResource]


class NetworkRoute(BaseModel):
    DestinationCidrBlock: Optional[ConstrainedString] = None
    Destinations: Optional[NetworkRouteDestinationList] = None
    PrefixListId: Optional[ConstrainedString] = None
    State: Optional[RouteState] = None
    Type: Optional[RouteType] = None


class NetworkRouteList(RootModel[List[NetworkRoute]]):
    root: List[NetworkRoute]


class Peering(BaseModel):
    CoreNetworkArn_1: Optional[CoreNetworkArn] = Field(None, alias='CoreNetworkArn')
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    CreatedAt: Optional[DateTime] = None
    EdgeLocation: Optional[ExternalRegionCode] = None
    OwnerAccountId: Optional[AWSAccountId] = None
    PeeringId_1: Optional[PeeringId] = Field(None, alias='PeeringId')
    PeeringType_1: Optional[PeeringType] = Field(None, alias='PeeringType')
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    State: Optional[PeeringState] = None
    Tags: Optional[TagList] = None


class PeeringList(RootModel[List[Peering]]):
    root: List[Peering]


class ProposedSegmentChange(BaseModel):
    AttachmentPolicyRuleNumber: Optional[Integer] = None
    SegmentName: Optional[ConstrainedString] = None
    Tags: Optional[TagList] = None


class PutCoreNetworkPolicyResponse(BaseModel):
    CoreNetworkPolicy_1: Optional[CoreNetworkPolicy] = Field(
        None, alias='CoreNetworkPolicy'
    )


class RegisterTransitGatewayResponse(BaseModel):
    TransitGatewayRegistration_1: Optional[TransitGatewayRegistration] = Field(
        None, alias='TransitGatewayRegistration'
    )


class RestoreCoreNetworkPolicyVersionResponse(BaseModel):
    CoreNetworkPolicy_1: Optional[CoreNetworkPolicy] = Field(
        None, alias='CoreNetworkPolicy'
    )


class RouteAnalysis(BaseModel):
    Destination: Optional[RouteAnalysisEndpointOptions] = None
    ForwardPath: Optional[RouteAnalysisPath] = None
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    IncludeReturnPath: Optional[Boolean] = None
    OwnerAccountId: Optional[AWSAccountId] = None
    ReturnPath: Optional[RouteAnalysisPath] = None
    RouteAnalysisId: Optional[ConstrainedString] = None
    Source: Optional[RouteAnalysisEndpointOptions] = None
    StartTimestamp: Optional[DateTime] = None
    Status: Optional[RouteAnalysisStatus] = None
    UseMiddleboxes: Optional[Boolean] = None


class Site(BaseModel):
    CreatedAt: Optional[DateTime] = None
    Description: Optional[ConstrainedString] = None
    GlobalNetworkId_1: Optional[GlobalNetworkId] = Field(None, alias='GlobalNetworkId')
    Location_1: Optional[Location] = Field(None, alias='Location')
    SiteArn_1: Optional[SiteArn] = Field(None, alias='SiteArn')
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')
    State: Optional[SiteState] = None
    Tags: Optional[TagList] = None


class SiteList(RootModel[List[Site]]):
    root: List[Site]


class StartRouteAnalysisResponse(BaseModel):
    RouteAnalysis_1: Optional[RouteAnalysis] = Field(None, alias='RouteAnalysis')


class TransitGatewayPeering(BaseModel):
    Peering_1: Optional[Peering] = Field(None, alias='Peering')
    TransitGatewayArn_1: Optional[TransitGatewayArn] = Field(
        None, alias='TransitGatewayArn'
    )
    TransitGatewayPeeringAttachmentId_1: Optional[TransitGatewayPeeringAttachmentId] = (
        Field(None, alias='TransitGatewayPeeringAttachmentId')
    )


class UpdateConnectionResponse(BaseModel):
    Connection_1: Optional[Connection] = Field(None, alias='Connection')


class UpdateCoreNetworkResponse(BaseModel):
    CoreNetwork_1: Optional[CoreNetwork] = Field(None, alias='CoreNetwork')


class UpdateDeviceResponse(BaseModel):
    Device_1: Optional[Device] = Field(None, alias='Device')


class UpdateGlobalNetworkResponse(BaseModel):
    GlobalNetwork_1: Optional[GlobalNetwork] = Field(None, alias='GlobalNetwork')


class UpdateLinkResponse(BaseModel):
    Link_1: Optional[Link] = Field(None, alias='Link')


class UpdateSiteResponse(BaseModel):
    Site_1: Optional[Site] = Field(None, alias='Site')


class Attachment(BaseModel):
    AttachmentId_1: Optional[AttachmentId] = Field(None, alias='AttachmentId')
    AttachmentPolicyRuleNumber: Optional[Integer] = None
    AttachmentType_1: Optional[AttachmentType] = Field(None, alias='AttachmentType')
    CoreNetworkArn_1: Optional[CoreNetworkArn] = Field(None, alias='CoreNetworkArn')
    CoreNetworkId_1: Optional[CoreNetworkId] = Field(None, alias='CoreNetworkId')
    CreatedAt: Optional[DateTime] = None
    EdgeLocation: Optional[ExternalRegionCode] = None
    OwnerAccountId: Optional[AWSAccountId] = None
    ProposedSegmentChange_1: Optional[ProposedSegmentChange] = Field(
        None, alias='ProposedSegmentChange'
    )
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    SegmentName: Optional[ConstrainedString] = None
    State: Optional[AttachmentState] = None
    Tags: Optional[TagList] = None
    UpdatedAt: Optional[DateTime] = None


class AttachmentList(RootModel[List[Attachment]]):
    root: List[Attachment]


class ConnectAttachment(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')
    Options: Optional[ConnectAttachmentOptions] = None
    TransportAttachmentId: Optional[AttachmentId] = None


class CreateConnectAttachmentResponse(BaseModel):
    ConnectAttachment_1: Optional[ConnectAttachment] = Field(
        None, alias='ConnectAttachment'
    )


class CreateDeviceResponse(BaseModel):
    Device_1: Optional[Device] = Field(None, alias='Device')


class CreateGlobalNetworkResponse(BaseModel):
    GlobalNetwork_1: Optional[GlobalNetwork] = Field(None, alias='GlobalNetwork')


class CreateLinkResponse(BaseModel):
    Link_1: Optional[Link] = Field(None, alias='Link')


class CreateSiteResponse(BaseModel):
    Site_1: Optional[Site] = Field(None, alias='Site')


class CreateTransitGatewayPeeringResponse(BaseModel):
    TransitGatewayPeering_1: Optional[TransitGatewayPeering] = Field(
        None, alias='TransitGatewayPeering'
    )


class DeleteAttachmentResponse(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')


class DeleteDeviceResponse(BaseModel):
    Device_1: Optional[Device] = Field(None, alias='Device')


class DeleteGlobalNetworkResponse(BaseModel):
    GlobalNetwork_1: Optional[GlobalNetwork] = Field(None, alias='GlobalNetwork')


class DeleteLinkResponse(BaseModel):
    Link_1: Optional[Link] = Field(None, alias='Link')


class DeletePeeringResponse(BaseModel):
    Peering_1: Optional[Peering] = Field(None, alias='Peering')


class DeleteSiteResponse(BaseModel):
    Site_1: Optional[Site] = Field(None, alias='Site')


class DescribeGlobalNetworksResponse(BaseModel):
    GlobalNetworks: Optional[GlobalNetworkList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetConnectAttachmentResponse(BaseModel):
    ConnectAttachment_1: Optional[ConnectAttachment] = Field(
        None, alias='ConnectAttachment'
    )


class GetLinksResponse(BaseModel):
    Links: Optional[LinkList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetNetworkResourcesResponse(BaseModel):
    NetworkResources: Optional[NetworkResourceList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetNetworkRoutesResponse(BaseModel):
    CoreNetworkSegmentEdge: Optional[CoreNetworkSegmentEdgeIdentifier] = None
    NetworkRoutes: Optional[NetworkRouteList] = None
    RouteTableArn: Optional[ResourceArn] = None
    RouteTableTimestamp: Optional[DateTime] = None
    RouteTableType_1: Optional[RouteTableType] = Field(None, alias='RouteTableType')


class GetRouteAnalysisResponse(BaseModel):
    RouteAnalysis_1: Optional[RouteAnalysis] = Field(None, alias='RouteAnalysis')


class GetSitesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Sites: Optional[SiteList] = None


class GetTransitGatewayPeeringResponse(BaseModel):
    TransitGatewayPeering_1: Optional[TransitGatewayPeering] = Field(
        None, alias='TransitGatewayPeering'
    )


class ListAttachmentsResponse(BaseModel):
    Attachments: Optional[AttachmentList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPeeringsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Peerings: Optional[PeeringList] = None


class RejectAttachmentResponse(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')


class SiteToSiteVpnAttachment(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')
    VpnConnectionArn_1: Optional[VpnConnectionArn] = Field(
        None, alias='VpnConnectionArn'
    )


class TransitGatewayRouteTableAttachment(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')
    PeeringId_1: Optional[PeeringId] = Field(None, alias='PeeringId')
    TransitGatewayRouteTableArn_1: Optional[TransitGatewayRouteTableArn] = Field(
        None, alias='TransitGatewayRouteTableArn'
    )


class VpcAttachment(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')
    Options: Optional[VpcOptions] = None
    SubnetArns: Optional[SubnetArnList] = None


class AcceptAttachmentResponse(BaseModel):
    Attachment_1: Optional[Attachment] = Field(None, alias='Attachment')


class CreateSiteToSiteVpnAttachmentResponse(BaseModel):
    SiteToSiteVpnAttachment_1: Optional[SiteToSiteVpnAttachment] = Field(
        None, alias='SiteToSiteVpnAttachment'
    )


class CreateTransitGatewayRouteTableAttachmentResponse(BaseModel):
    TransitGatewayRouteTableAttachment_1: Optional[
        TransitGatewayRouteTableAttachment
    ] = Field(None, alias='TransitGatewayRouteTableAttachment')


class CreateVpcAttachmentResponse(BaseModel):
    VpcAttachment_1: Optional[VpcAttachment] = Field(None, alias='VpcAttachment')


class GetSiteToSiteVpnAttachmentResponse(BaseModel):
    SiteToSiteVpnAttachment_1: Optional[SiteToSiteVpnAttachment] = Field(
        None, alias='SiteToSiteVpnAttachment'
    )


class GetTransitGatewayRouteTableAttachmentResponse(BaseModel):
    TransitGatewayRouteTableAttachment_1: Optional[
        TransitGatewayRouteTableAttachment
    ] = Field(None, alias='TransitGatewayRouteTableAttachment')


class GetVpcAttachmentResponse(BaseModel):
    VpcAttachment_1: Optional[VpcAttachment] = Field(None, alias='VpcAttachment')


class UpdateVpcAttachmentResponse(BaseModel):
    VpcAttachment_1: Optional[VpcAttachment] = Field(None, alias='VpcAttachment')
